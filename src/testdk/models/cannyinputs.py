"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .outputformat import OutputFormat
from pydantic import model_serializer
from testdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class CannyInputsTypedDict(TypedDict):
    prompt: str
    r"""Text prompt for image generation"""
    control_image: NotRequired[Nullable[str]]
    r"""Base64 encoded image to use as control input if no preprocessed image is provided"""
    preprocessed_image: NotRequired[Nullable[str]]
    r"""Optional pre-processed image that will bypass the control preprocessing step"""
    canny_low_threshold: NotRequired[Nullable[int]]
    r"""Low threshold for Canny edge detection"""
    canny_high_threshold: NotRequired[Nullable[int]]
    r"""High threshold for Canny edge detection"""
    prompt_upsampling: NotRequired[Nullable[bool]]
    r"""Whether to perform upsampling on the prompt"""
    seed: NotRequired[Nullable[int]]
    r"""Optional seed for reproducibility"""
    steps: NotRequired[Nullable[int]]
    r"""Number of steps for the image generation process"""
    output_format: NotRequired[Nullable[OutputFormat]]
    r"""Output format for the generated image. Can be 'jpeg' or 'png'."""
    guidance: NotRequired[Nullable[float]]
    r"""Guidance strength for the image generation process"""
    safety_tolerance: NotRequired[int]
    r"""Tolerance level for input and output moderation. Between 0 and 6, 0 being most strict, 6 being least strict."""
    webhook_url: NotRequired[Nullable[str]]
    r"""URL to receive webhook notifications"""
    webhook_secret: NotRequired[Nullable[str]]
    r"""Optional secret for webhook signature verification"""


class CannyInputs(BaseModel):
    prompt: str
    r"""Text prompt for image generation"""

    control_image: OptionalNullable[str] = UNSET
    r"""Base64 encoded image to use as control input if no preprocessed image is provided"""

    preprocessed_image: OptionalNullable[str] = UNSET
    r"""Optional pre-processed image that will bypass the control preprocessing step"""

    canny_low_threshold: OptionalNullable[int] = UNSET
    r"""Low threshold for Canny edge detection"""

    canny_high_threshold: OptionalNullable[int] = UNSET
    r"""High threshold for Canny edge detection"""

    prompt_upsampling: OptionalNullable[bool] = UNSET
    r"""Whether to perform upsampling on the prompt"""

    seed: OptionalNullable[int] = UNSET
    r"""Optional seed for reproducibility"""

    steps: OptionalNullable[int] = UNSET
    r"""Number of steps for the image generation process"""

    output_format: OptionalNullable[OutputFormat] = UNSET
    r"""Output format for the generated image. Can be 'jpeg' or 'png'."""

    guidance: OptionalNullable[float] = UNSET
    r"""Guidance strength for the image generation process"""

    safety_tolerance: Optional[int] = 2
    r"""Tolerance level for input and output moderation. Between 0 and 6, 0 being most strict, 6 being least strict."""

    webhook_url: OptionalNullable[str] = UNSET
    r"""URL to receive webhook notifications"""

    webhook_secret: OptionalNullable[str] = UNSET
    r"""Optional secret for webhook signature verification"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "control_image",
            "preprocessed_image",
            "canny_low_threshold",
            "canny_high_threshold",
            "prompt_upsampling",
            "seed",
            "steps",
            "output_format",
            "guidance",
            "safety_tolerance",
            "webhook_url",
            "webhook_secret",
        ]
        nullable_fields = [
            "control_image",
            "preprocessed_image",
            "canny_low_threshold",
            "canny_high_threshold",
            "prompt_upsampling",
            "seed",
            "steps",
            "output_format",
            "guidance",
            "webhook_url",
            "webhook_secret",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
