"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .outputformat import OutputFormat
from pydantic import model_serializer
from testdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class FluxDevInputsTypedDict(TypedDict):
    prompt: NotRequired[str]
    r"""Text prompt for image generation."""
    image_prompt: NotRequired[Nullable[str]]
    r"""Optional base64 encoded image to use as a prompt for generation."""
    width: NotRequired[int]
    r"""Width of the generated image in pixels. Must be a multiple of 32."""
    height: NotRequired[int]
    r"""Height of the generated image in pixels. Must be a multiple of 32."""
    steps: NotRequired[Nullable[int]]
    r"""Number of steps for the image generation process."""
    prompt_upsampling: NotRequired[bool]
    r"""Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation."""
    seed: NotRequired[Nullable[int]]
    r"""Optional seed for reproducibility."""
    guidance: NotRequired[Nullable[float]]
    r"""Guidance scale for image generation. High guidance scales improve prompt adherence at the cost of reduced realism."""
    safety_tolerance: NotRequired[int]
    r"""Tolerance level for input and output moderation. Between 0 and 6, 0 being most strict, 6 being least strict."""
    output_format: NotRequired[Nullable[OutputFormat]]
    r"""Output format for the generated image. Can be 'jpeg' or 'png'."""
    webhook_url: NotRequired[Nullable[str]]
    r"""URL to receive webhook notifications"""
    webhook_secret: NotRequired[Nullable[str]]
    r"""Optional secret for webhook signature verification"""


class FluxDevInputs(BaseModel):
    prompt: Optional[str] = ""
    r"""Text prompt for image generation."""

    image_prompt: OptionalNullable[str] = UNSET
    r"""Optional base64 encoded image to use as a prompt for generation."""

    width: Optional[int] = 1024
    r"""Width of the generated image in pixels. Must be a multiple of 32."""

    height: Optional[int] = 768
    r"""Height of the generated image in pixels. Must be a multiple of 32."""

    steps: OptionalNullable[int] = UNSET
    r"""Number of steps for the image generation process."""

    prompt_upsampling: Optional[bool] = False
    r"""Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation."""

    seed: OptionalNullable[int] = UNSET
    r"""Optional seed for reproducibility."""

    guidance: OptionalNullable[float] = UNSET
    r"""Guidance scale for image generation. High guidance scales improve prompt adherence at the cost of reduced realism."""

    safety_tolerance: Optional[int] = 2
    r"""Tolerance level for input and output moderation. Between 0 and 6, 0 being most strict, 6 being least strict."""

    output_format: OptionalNullable[OutputFormat] = UNSET
    r"""Output format for the generated image. Can be 'jpeg' or 'png'."""

    webhook_url: OptionalNullable[str] = UNSET
    r"""URL to receive webhook notifications"""

    webhook_secret: OptionalNullable[str] = UNSET
    r"""Optional secret for webhook signature verification"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "prompt",
            "image_prompt",
            "width",
            "height",
            "steps",
            "prompt_upsampling",
            "seed",
            "guidance",
            "safety_tolerance",
            "output_format",
            "webhook_url",
            "webhook_secret",
        ]
        nullable_fields = [
            "image_prompt",
            "steps",
            "seed",
            "guidance",
            "output_format",
            "webhook_url",
            "webhook_secret",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
