"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .outputformat import OutputFormat
from pydantic import model_serializer
from testdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class FluxProFillInputsTypedDict(TypedDict):
    image: str
    r"""A Base64-encoded string representing the image you wish to modify. Can contain alpha mask if desired."""
    mask: NotRequired[Nullable[str]]
    r"""A Base64-encoded string representing a mask for the areas you want to modify in the image. The mask should be the same dimensions as the image and in black and white. Black areas (0%) indicate no modification, while white areas (100%) specify areas for inpainting. Optional if you provide an alpha mask in the original image. Validation: The endpoint verifies that the dimensions of the mask match the original image."""
    prompt: NotRequired[Nullable[str]]
    r"""The description of the changes you want to make. This text guides the inpainting process, allowing you to specify features, styles, or modifications for the masked area."""
    steps: NotRequired[Nullable[int]]
    r"""Number of steps for the image generation process"""
    prompt_upsampling: NotRequired[Nullable[bool]]
    r"""Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation"""
    seed: NotRequired[Nullable[int]]
    r"""Optional seed for reproducibility"""
    guidance: NotRequired[Nullable[float]]
    r"""Guidance strength for the image generation process"""
    output_format: NotRequired[Nullable[OutputFormat]]
    r"""Output format for the generated image. Can be 'jpeg' or 'png'."""
    safety_tolerance: NotRequired[int]
    r"""Tolerance level for input and output moderation. Between 0 and 6, 0 being most strict, 6 being least strict."""
    webhook_url: NotRequired[Nullable[str]]
    r"""URL to receive webhook notifications"""
    webhook_secret: NotRequired[Nullable[str]]
    r"""Optional secret for webhook signature verification"""


class FluxProFillInputs(BaseModel):
    image: str
    r"""A Base64-encoded string representing the image you wish to modify. Can contain alpha mask if desired."""

    mask: OptionalNullable[str] = UNSET
    r"""A Base64-encoded string representing a mask for the areas you want to modify in the image. The mask should be the same dimensions as the image and in black and white. Black areas (0%) indicate no modification, while white areas (100%) specify areas for inpainting. Optional if you provide an alpha mask in the original image. Validation: The endpoint verifies that the dimensions of the mask match the original image."""

    prompt: OptionalNullable[str] = UNSET
    r"""The description of the changes you want to make. This text guides the inpainting process, allowing you to specify features, styles, or modifications for the masked area."""

    steps: OptionalNullable[int] = UNSET
    r"""Number of steps for the image generation process"""

    prompt_upsampling: OptionalNullable[bool] = UNSET
    r"""Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation"""

    seed: OptionalNullable[int] = UNSET
    r"""Optional seed for reproducibility"""

    guidance: OptionalNullable[float] = UNSET
    r"""Guidance strength for the image generation process"""

    output_format: OptionalNullable[OutputFormat] = UNSET
    r"""Output format for the generated image. Can be 'jpeg' or 'png'."""

    safety_tolerance: Optional[int] = 2
    r"""Tolerance level for input and output moderation. Between 0 and 6, 0 being most strict, 6 being least strict."""

    webhook_url: OptionalNullable[str] = UNSET
    r"""URL to receive webhook notifications"""

    webhook_secret: OptionalNullable[str] = UNSET
    r"""Optional secret for webhook signature verification"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "mask",
            "prompt",
            "steps",
            "prompt_upsampling",
            "seed",
            "guidance",
            "output_format",
            "safety_tolerance",
            "webhook_url",
            "webhook_secret",
        ]
        nullable_fields = [
            "mask",
            "prompt",
            "steps",
            "prompt_upsampling",
            "seed",
            "guidance",
            "output_format",
            "webhook_url",
            "webhook_secret",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
