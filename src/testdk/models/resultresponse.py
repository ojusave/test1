"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .statusresponse import StatusResponse
from pydantic import model_serializer
from testdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Any
from typing_extensions import NotRequired, TypedDict


class DetailsTypedDict(TypedDict):
    pass


class Details(BaseModel):
    pass


class ResultResponseTypedDict(TypedDict):
    id: str
    r"""Task id for retrieving result"""
    status: StatusResponse
    result: NotRequired[Nullable[Any]]
    progress: NotRequired[Nullable[float]]
    details: NotRequired[Nullable[DetailsTypedDict]]


class ResultResponse(BaseModel):
    id: str
    r"""Task id for retrieving result"""

    status: StatusResponse

    result: OptionalNullable[Any] = UNSET

    progress: OptionalNullable[float] = UNSET

    details: OptionalNullable[Details] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["result", "progress", "details"]
        nullable_fields = ["result", "progress", "details"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
